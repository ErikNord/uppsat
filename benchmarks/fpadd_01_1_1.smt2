(set-info :status unknown)
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012.)|)
(set-logic QF_FPBV)
(declare-fun |c::main::1::b!0@1#1| () (_ FloatingPoint 8 24))
(declare-fun |c::main::1::a!0@1#1| () (_ FloatingPoint 8 24))
(declare-fun |c::main::1::c!0@1#1| () (_ FloatingPoint 8 24))
(declare-fun |goto_symex::&92;guard#1| () Bool)
(define-fun .3 () RoundingMode roundNearestTiesToEven)
(define-fun .9 () (_ FloatingPoint 8 24) |c::main::1::a!0@1#1|)
(define-fun .10 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) .3 .9))
(define-fun .12 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundTowardZero 1000.0))
(define-fun .13 () Bool (fp.lt .10 .12))
(define-fun .14 () (_ FloatingPoint 8 24) |c::main::1::b!0@1#1|)
(define-fun .15 () (_ FloatingPoint 8 24) |c::main::1::c!0@1#1|)
(define-fun .16 () (_ FloatingPoint 8 24) (fp.add .3 .14 .15))
(define-fun .17 () (_ FloatingPoint 8 24) (fp.add .3 .9 .16))
(define-fun .18 () (_ FloatingPoint 8 24) (fp.neg .17))
(define-fun .19 () (_ FloatingPoint 8 24) (fp.add .3 .9 .14))
(define-fun .20 () (_ FloatingPoint 8 24) (fp.add .3 .15 .19))
(define-fun .21 () (_ FloatingPoint 8 24) (fp.add .3 .18 .20))
(define-fun .23 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 1.0))
(define-fun .24 () Bool (fp.leq .21 .23))
(define-fun .26 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundTowardZero (- 1000.0)))
(define-fun .27 () Bool (fp.lt .26 .10))
(define-fun .28 () Bool (and .13 .27))
(define-fun .29 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) .3 .14))
(define-fun .30 () Bool (fp.lt .29 .12))
(define-fun .31 () Bool (and .28 .30))
(define-fun .32 () Bool (fp.lt .26 .29))
(define-fun .33 () Bool (and .31 .32))
(define-fun .34 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) .3 .15))
(define-fun .35 () Bool (fp.lt .34 .12))
(define-fun .36 () Bool (and .33 .35))
(define-fun .37 () Bool (fp.lt .26 .34))
(define-fun .38 () Bool (and .36 .37))
(define-fun .39 () Bool (fp.leq .14 .9))
(define-fun .40 () Bool (and .38 .39))
(define-fun .41 () Bool (fp.leq .15 .14))
(define-fun .42 () Bool (and .40 .41))
(define-fun .43 () (_ FloatingPoint 8 24) (fp.neg .14))
(define-fun .44 () (_ FloatingPoint 8 24) (fp.add .3 .9 .43))
(define-fun .46 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.100000001490116119385))
(define-fun .47 () Bool (fp.leq .44 .46))
(define-fun .48 () Bool (and .42 .47))
(define-fun .49 () (_ FloatingPoint 8 24) (fp.neg .15))
(define-fun .50 () (_ FloatingPoint 8 24) (fp.add .3 .9 .49))
(define-fun .51 () Bool (fp.leq .50 .46))
(define-fun .52 () Bool (and .48 .51))
(define-fun .53 () (_ FloatingPoint 8 24) (fp.add .3 .14 .49))
(define-fun .54 () Bool (fp.leq .53 .46))
(define-fun .55 () Bool (and .52 .54))
(define-fun .56 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) .3 .20))
(define-fun .57 () (_ FloatingPoint 11 53) (_ +oo 11 53))
(define-fun .58 () Bool (fp.lt .56 .57))
(define-fun .59 () (_ FloatingPoint 11 53) (_ -oo 11 53))
(define-fun .60 () Bool (fp.lt .59 .56))
(define-fun .61 () Bool (and .58 .60))
(define-fun .62 () Bool (and .55 .61))
(define-fun .63 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) .3 .17))
(define-fun .64 () Bool (fp.lt .63 .57))
(define-fun .65 () Bool (fp.lt .59 .63))
(define-fun .66 () Bool (and .64 .65))
(define-fun .67 () Bool (and .62 .66))
(define-fun .68 () Bool (not .24))
(define-fun .69 () Bool (and .67 .68))
(assert .69)
(check-sat)
