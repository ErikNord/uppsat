(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012.)|)
(set-info :status unknown)
(set-logic QF_FPBV)
(declare-fun |c::main::1::IN!0@1#0| () (_ FloatingPoint 8 24))
(define-fun .3 () RoundingMode roundNearestTiesToEven)
(define-fun .9 () (_ FloatingPoint 8 24) |c::main::1::IN!0@1#0|)
(define-fun .11 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.800000011920928955078))
(define-fun .12 () Bool (fp.lt .9 .11))
(define-fun .14 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.800000011920928955078)))
(define-fun .15 () Bool (fp.lt .14 .9))
(define-fun .16 () Bool (and .12 .15))
(define-fun .17 () (_ FloatingPoint 8 24) (fp.mul .3 .9 .9))
(define-fun .19 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 2.0))
(define-fun .20 () (_ FloatingPoint 8 24) (fp.div .3 .17 .19))
(define-fun .21 () (_ FloatingPoint 8 24) (fp.neg .20))
(define-fun .23 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 1.0))
(define-fun .24 () (_ FloatingPoint 8 24) (fp.add .3 .21 .23))
(define-fun .25 () (_ FloatingPoint 8 24) (fp.mul .3 .9 .17))
(define-fun .26 () (_ FloatingPoint 8 24) (fp.mul .3 .9 .25))
(define-fun .28 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 24.0))
(define-fun .29 () (_ FloatingPoint 8 24) (fp.div .3 .26 .28))
(define-fun .30 () (_ FloatingPoint 8 24) (fp.add .3 .24 .29))
(define-fun .31 () (_ FloatingPoint 8 24) (fp.mul .3 .9 .26))
(define-fun .32 () (_ FloatingPoint 8 24) (fp.mul .3 .9 .31))
(define-fun .34 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 720.0))
(define-fun .35 () (_ FloatingPoint 8 24) (fp.div .3 .32 .34))
(define-fun .36 () (_ FloatingPoint 8 24) (fp.add .3 .30 .35))
(define-fun .38 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 6.0))
(define-fun .39 () (_ FloatingPoint 8 24) (fp.div .3 .25 .38))
(define-fun .40 () (_ FloatingPoint 8 24) (fp.neg .39))
(define-fun .41 () (_ FloatingPoint 8 24) (fp.add .3 .9 .40))
(define-fun .43 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 120.0))
(define-fun .44 () (_ FloatingPoint 8 24) (fp.div .3 .31 .43))
(define-fun .45 () (_ FloatingPoint 8 24) (fp.add .3 .41 .44))
(define-fun .46 () (_ FloatingPoint 8 24) (fp.mul .3 .9 .32))
(define-fun .48 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 5040.0))
(define-fun .49 () (_ FloatingPoint 8 24) (fp.div .3 .46 .48))
(define-fun .50 () (_ FloatingPoint 8 24) (fp.add .3 .45 .49))
(define-fun .51 () (_ FloatingPoint 8 24) (fp.div .3 .50 .36))
(define-fun .52 () (_ FloatingPoint 8 24) (fp.neg .51))
(define-fun .53 () (_ FloatingPoint 8 24) (fp.add .3 .9 .52))
(define-fun .54 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) .3 .53))
(define-fun .56 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundTowardZero 0.100000000000000005551))
(define-fun .57 () Bool (fp.lt .54 .56))
(define-fun .58 () Bool (not .57))
(define-fun .59 () Bool (and .16 .58))
(assert .59)
(check-sat)
