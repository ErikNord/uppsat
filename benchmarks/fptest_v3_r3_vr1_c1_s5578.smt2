(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012.)|)
(set-info :status unknown)
(set-logic QF_FPBV)
(declare-fun x0 () (_ FloatingPoint 8 24))
(declare-fun x1 () (_ FloatingPoint 8 24))
(declare-fun x2 () (_ FloatingPoint 8 24))
(define-fun .10 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 1.0))
(define-fun .13 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 1.0)))
(define-fun .14 () (_ FloatingPoint 8 24) x0)
(define-fun .15 () Bool (fp.leq .13 .14))
(define-fun .16 () Bool (fp.leq .14 .10))
(define-fun .17 () Bool (and .15 .16))
(assert .17)
(define-fun .18 () (_ FloatingPoint 8 24) x1)
(define-fun .19 () Bool (fp.leq .13 .18))
(define-fun .20 () Bool (fp.leq .18 .10))
(define-fun .21 () Bool (and .19 .20))
(assert .21)
(define-fun .22 () (_ FloatingPoint 8 24) x2)
(define-fun .23 () Bool (fp.leq .13 .22))
(define-fun .24 () Bool (fp.leq .22 .10))
(define-fun .25 () Bool (and .23 .24))
(assert .25)
(define-fun .3 () RoundingMode roundNearestTiesToEven)
(define-fun .12 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.0))
(define-fun .32 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.893999993801116943359)))
(define-fun .34 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.307000011205673217773))
(define-fun .35 () (_ FloatingPoint 8 24) (fp.mul .3 .14 .34))
(define-fun .36 () (_ FloatingPoint 8 24) (fp.add .3 .12 .35))
(define-fun .39 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.349000006914138793945)))
(define-fun .40 () (_ FloatingPoint 8 24) (fp.mul .3 .18 .39))
(define-fun .41 () (_ FloatingPoint 8 24) (fp.add .3 .36 .40))
(define-fun .44 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.00800000037997961044312)))
(define-fun .45 () (_ FloatingPoint 8 24) (fp.mul .3 .22 .44))
(define-fun .46 () (_ FloatingPoint 8 24) (fp.add .3 .41 .45))
(define-fun .47 () Bool (fp.leq .46 .32))
(assert .47)
(define-fun .50 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.333000004291534423828)))
(define-fun .52 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.683000028133392333984))
(define-fun .53 () (_ FloatingPoint 8 24) (fp.mul .3 .14 .52))
(define-fun .54 () (_ FloatingPoint 8 24) (fp.add .3 .12 .53))
(define-fun .56 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.444000005722045898438))
(define-fun .57 () (_ FloatingPoint 8 24) (fp.mul .3 .18 .56))
(define-fun .58 () (_ FloatingPoint 8 24) (fp.add .3 .54 .57))
(define-fun .61 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.654999971389770507813)))
(define-fun .62 () (_ FloatingPoint 8 24) (fp.mul .3 .22 .61))
(define-fun .63 () (_ FloatingPoint 8 24) (fp.add .3 .58 .62))
(define-fun .64 () Bool (fp.leq .50 .63))
(assert .64)
(define-fun .66 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero 0.910000026226043701172))
(define-fun .69 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.933000028133392333984)))
(define-fun .70 () (_ FloatingPoint 8 24) (fp.mul .3 .14 .69))
(define-fun .71 () (_ FloatingPoint 8 24) (fp.add .3 .12 .70))
(define-fun .74 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.880999982357025146484)))
(define-fun .75 () (_ FloatingPoint 8 24) (fp.mul .3 .18 .74))
(define-fun .76 () (_ FloatingPoint 8 24) (fp.add .3 .71 .75))
(define-fun .79 () (_ FloatingPoint 8 24) ((_ to_fp 8 24) roundTowardZero (- 0.0160000007599592208862)))
(define-fun .80 () (_ FloatingPoint 8 24) (fp.mul .3 .22 .79))
(define-fun .81 () (_ FloatingPoint 8 24) (fp.add .3 .76 .80))
(define-fun .82 () Bool (fp.leq .66 .81))
(assert .82)
(check-sat)
